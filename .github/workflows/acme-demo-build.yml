name: "Build and Deploy Preview Environment"

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, closed]

jobs:
  preview-environment:
    name: "Build and Deploy Preview Environment"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure
    env:
      tfcWorkspaceName: app-demoapp-aws-preview-${{ github.head_ref }}
      tfcOrg: demo-lab-hashicorp
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # Only set up preview environment for pull requests
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TFC_API_TOKEN }}
      # Update main.tf to default to single workspace
      - name: Terraform Init, create TFC workspace
        id: init-workspace
        if: github.event_name == 'pull_request'
        run: |
          sed -i 's/tags = \["hashicupsBackend"\]/name = "'$tfcWorkspaceName'"/g' main.tf
          terraform init -input=false
      # Builds and deploys backend + Vercel preview environments
      - name: Build and deploy preview environment
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        id: build-deploy-preview-environment
        run: |
          terraform apply --auto-approve
      # Runs Terraform output to display the backend URL and Vercel preview URL
      - name: Terraform Output
        id: output
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        run: |
          terraform output -raw public_ip
        continue-on-error: true
      # Creates comments on pull request with Terraform output
      - name: Create comment with Terraform output
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        env:
          OUTPUT: "${{ steps.output.outputs.stdout }}"
        with:
          github-token: ${{ secrets.TOKEN_GIT }}
          script: |
            const output = `#### Preview Environment Outputs ðŸ–Œ
            \`\`\`
            ${process.env.OUTPUT}
            \`\`\`
            `
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      # When user closes or merges pull request, this will destroy the resources then delete the TFC workspace
      - name: Destroy preview environment
        if: github.event.action == 'closed'
        id: destroy-preview-environment
        run: |
          terraform destroy --auto-approve
          curl --header "Authorization: Bearer ${{ secrets.TFC_API_TOKEN }}" --header "Content-Type: application/vnd.api+json" --request DELETE "https://app.terraform.io/api/v2/organizations/${tfcOrg}/workspaces/${tfcWorkspaceName}"
          - name: Troubleshooting
      - name: Troubleshooting
        run: |
          curl -sSL -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | \
          jq "{ jwt: .value, role: \"$VAULT_ROLE\" }" > ./token.json
            
          echo 'GitHub Actions Token Claims'
          cat ./token.json | jq -r '.jwt | split(".") | .[1] | @base64d' | jq

          echo 'Vault Login Response'
          curl -sSLf -X POST -H "Content-Type: application/json" -H "X-Vault-Namespace: admin" --data @token.json $VAULT_URL/v1/auth/$VAULT_AUTH_PATH/login

          # Remove the token file when we're done (if we don't fail)
          rm ./token.json
        env:
          VAULT_URL: ${{ secrets.VAULT_ADDR }}
          VAULT_AUTH_PATH: jwt
          VAULT_ROLE: ${{ secrets.VAULT_ROLE }}
      - name: Retrieve Secrets
        id: secretdata
        uses: hashicorp/vault-action@v2.4.0
        with: 
          method: jwt
          url: ${{ secrets.VAULT_ADDR }}
          namespace: ${{ secrets.VAULT_NAMESPACE }}
          role: ${{ secrets.VAULT_ROLE }}
          secrets: ${{ secrets.VAULT_SECRET_PATH }} ${{ secrets.VAULT_SECRET_KEY }} | MY_SECRET
      - name: Print Secrets
        run: |
            echo '${{ steps.secretdata.outputs.MY_SECRET }}'
      - name: Checkout
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
      - name: Cypress.io
        if: github.event_name == 'pull_request'
        uses: cypress-io/github-action@v4.2.0
        with:
          wait-on: 'http://${{ steps.output.outputs.stdout }}:80'
          config: baseUrl=http://${{ steps.output.outputs.stdout }}:80